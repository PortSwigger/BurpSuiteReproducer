package com.rsm.reproducer;

import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.HttpService;
import burp.api.montoya.http.message.HttpHeader;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.params.HttpParameter;
import burp.api.montoya.http.message.params.HttpParameterType;
import burp.api.montoya.http.message.params.ParsedHttpParameter;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.http.message.responses.HttpResponse;
import burp.api.montoya.ui.editor.HttpRequestEditor;
import burp.api.montoya.ui.editor.HttpResponseEditor;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.stream.Collectors;

public class ReproducerTab {
    private JPanel mainPanel;
    private JTable requestSelectorTable;
    private JButton copyToPythonRequestsButton;
    private JButton copyToPowerShellButton;
    private JButton copyToJavaScriptButton;
    private JTable analyzeTable;
    private JProgressBar progressBar;
    private JButton analyzeButton;
    private JPanel originalRequestViewer;
    private JPanel originalResponseViewer;
    private JPanel analyzeRequestViewer;
    private JPanel simplifiedRequestViewer;
    private JPanel simplifiedResponseViewer;
    private JPanel analyzeResponseViewer;
    private JButton testButton;
    private JTabbedPane hrrTabPane;
    private JSplitPane topSplitPane;
    private final DefaultTableModel requestSelectorTableModel;


    private static final Object[] REQUEST_SELECTOR_HEADERS = new Object[]{"Original HRR", "Simplified HRR", "Analyze Table", "Method", "URL", "Response Code", "Length", "\u26A0\uFE0F"};
    private static final Object[] ANALYZE_HEADERS = new Object[]{"Analyze HRR", "Type", "Name", "Value", "Include", "Response Code", "Length", "\u26A0\uFE0F"};

    MontoyaApi api;

    HttpRequestResponse originalEditorDefault;
    HttpRequestResponse analyzeEditorDefault;
    HttpRequestResponse simplifiedEditorDefault;
    HttpRequestEditor originalRequestEditor;
    HttpResponseEditor originalResponseEditor;
    HttpRequestEditor analyzeRequestEditor;
    HttpResponseEditor analyzeResponseEditor;
    HttpRequestEditor simplifiedRequestEditor;
    HttpResponseEditor simplifiedResponseEditor;

    public ReproducerTab(MontoyaApi api) {
        this.api = api;

        // Create the Burp request/response editors and add to their respective JPanels generated by IntelliJ GUI Designer.
        originalRequestEditor = api.userInterface().createHttpRequestEditor();
        originalResponseEditor = api.userInterface().createHttpResponseEditor();
        analyzeRequestEditor = api.userInterface().createHttpRequestEditor();
        analyzeResponseEditor = api.userInterface().createHttpResponseEditor();
        simplifiedRequestEditor = api.userInterface().createHttpRequestEditor();
        simplifiedResponseEditor = api.userInterface().createHttpResponseEditor();
        originalRequestViewer.add(originalRequestEditor.uiComponent());
        originalResponseViewer.add(originalResponseEditor.uiComponent());
        analyzeRequestViewer.add(analyzeRequestEditor.uiComponent());
        analyzeResponseViewer.add(analyzeResponseEditor.uiComponent());
        simplifiedRequestViewer.add(simplifiedRequestEditor.uiComponent());
        simplifiedResponseViewer.add(simplifiedResponseEditor.uiComponent());
        originalEditorDefault = HttpRequestResponse.httpRequestResponse(
                HttpRequest.httpRequest(HttpService.httpService("example.org", true), "Select a request first."),
                HttpResponse.httpResponse("Select a request first."));
        originalRequestEditor.setRequest(originalEditorDefault.request());
        originalResponseEditor.setResponse(originalEditorDefault.response());
        analyzeEditorDefault = HttpRequestResponse.httpRequestResponse(
                HttpRequest.httpRequest(HttpService.httpService("example.org", true), "Select an analysis test first."),
                HttpResponse.httpResponse("Select an analysis test first."));
        analyzeRequestEditor.setRequest(analyzeEditorDefault.request());
        analyzeResponseEditor.setResponse(analyzeEditorDefault.response());
        simplifiedEditorDefault = HttpRequestResponse.httpRequestResponse(
                HttpRequest.httpRequest(HttpService.httpService("example.org", true), "Click \"Create Simplified Request\" first."),
                HttpResponse.httpResponse("Click \"Create Simplified Request\" first."));
        simplifiedRequestEditor.setRequest(simplifiedEditorDefault.request());
        simplifiedResponseEditor.setResponse(simplifiedEditorDefault.response());

        // Create table models
        requestSelectorTableModel = new DefaultTableModel(null, REQUEST_SELECTOR_HEADERS) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        // Set the "Include" column to be editable and Boolean to make it a working checkbox
        DefaultTableModel defaultAnalyzeTableModel = new DefaultTableModel(null, ANALYZE_HEADERS) {
            // Set the "Include" column to be editable and Boolean to make it a working checkbox
            public boolean isCellEditable(int row, int column) {
                return column == 4;
            }

            public Class getColumnClass(int column) {
                return column == 4 ? Boolean.class : super.getColumnClass(column);
            }
        };
        requestSelectorTable.setModel(requestSelectorTableModel);
        analyzeTable.setModel(defaultAnalyzeTableModel);
        analyzeTable.removeColumn(analyzeTable.getColumnModel().getColumn(0));

        requestSelectorTable.setAutoCreateRowSorter(true);
        analyzeTable.setAutoCreateRowSorter(true);

        // Hide columns that stores request and sub-table data
        requestSelectorTable.removeColumn(requestSelectorTable.getColumnModel().getColumn(0));
        requestSelectorTable.removeColumn(requestSelectorTable.getColumnModel().getColumn(0));
        requestSelectorTable.removeColumn(requestSelectorTable.getColumnModel().getColumn(0));

        requestSelectorTable.getColumnModel().getColumn(4).setCellRenderer(
                new DefaultTableCellRenderer() {
                    @Override
                    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                        if (value != null && !((String) value).isEmpty()) {
                            this.setText("\u26A0\uFE0F");
                            this.setToolTipText(value.toString());
                        } else {
                            this.setToolTipText(null);
                        }
                        return this;
                    }
                });

        // Set sizing
        topSplitPane.setResizeWeight(0.5);
        requestSelectorTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        requestSelectorTable.getColumnModel().getColumn(1).setPreferredWidth(700);
        requestSelectorTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        requestSelectorTable.getColumnModel().getColumn(3).setPreferredWidth(150);
        requestSelectorTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        analyzeTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        analyzeTable.getColumnModel().getColumn(1).setPreferredWidth(300);
        analyzeTable.getColumnModel().getColumn(2).setPreferredWidth(300);
        analyzeTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        analyzeTable.getColumnModel().getColumn(4).setPreferredWidth(150);
        analyzeTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        analyzeTable.getColumnModel().getColumn(6).setPreferredWidth(50);

        // Only allow one row to be selected
        requestSelectorTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        analyzeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Update the request / response editors when a selection row is selected
        ListSelectionModel requestSelectorSelectionModel = requestSelectorTable.getSelectionModel();
        requestSelectorSelectionModel.addListSelectionListener(e -> {
            // Prevents running twice on mouse clicks and if a row was deleted
            if (!e.getValueIsAdjusting() && requestSelectorTable.getSelectedRow() >= 0) {
                int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                HttpRequestResponse hrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 0);
                originalRequestEditor.setRequest(hrr.request());
                originalResponseEditor.setResponse(hrr.response());

                HttpRequestResponse simplifiedHrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 1);
                simplifiedRequestEditor.setRequest(simplifiedHrr.request());
                simplifiedResponseEditor.setResponse(simplifiedHrr.response());

                analyzeRequestEditor.setRequest(analyzeEditorDefault.request());
                analyzeResponseEditor.setResponse(analyzeEditorDefault.response());

                analyzeTable.setModel((DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2));
                analyzeTable.removeColumn(analyzeTable.getColumnModel().getColumn(0));
                analyzeTable.getColumnModel().getColumn(6).setCellRenderer(
                        new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                if (value != null && !((String) value).isEmpty()) {
                                    this.setText("\u26A0\uFE0F");
                                    this.setToolTipText(value.toString());
                                } else {
                                    this.setToolTipText(null);
                                }
                                return this;
                            }
                        });
                analyzeTable.getColumnModel().getColumn(0).setPreferredWidth(100);
                analyzeTable.getColumnModel().getColumn(1).setPreferredWidth(300);
                analyzeTable.getColumnModel().getColumn(2).setPreferredWidth(300);
                analyzeTable.getColumnModel().getColumn(3).setPreferredWidth(100);
                analyzeTable.getColumnModel().getColumn(4).setPreferredWidth(150);
                analyzeTable.getColumnModel().getColumn(5).setPreferredWidth(100);
                analyzeTable.getColumnModel().getColumn(6).setPreferredWidth(50);
            }
        });

        // Update the analysis editor when an analysis row is selected
        ListSelectionModel analyzeSelectionModel = analyzeTable.getSelectionModel();
        analyzeSelectionModel.addListSelectionListener(e -> {
            // Prevents running twice on mouse clicks and if a row was deleted
            if (!e.getValueIsAdjusting() && analyzeTable.getSelectedRow() >= 0) {
                int modelRow = analyzeTable.convertRowIndexToModel(analyzeTable.getSelectedRow());
                HttpRequestResponse hrr = (HttpRequestResponse) analyzeTable.getModel().getValueAt(modelRow, 0);
                analyzeRequestEditor.setRequest(hrr.request());
                if (hrr.response() == null) {
                    analyzeResponseEditor.setResponse(HttpResponse.httpResponse("Click the \"Analyze\" button first."));
                } else {
                    analyzeResponseEditor.setResponse(hrr.response());
                }
            }
        });

        analyzeButton.addActionListener(e -> {
            SwingWorker<Void, String> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() {
                    int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                    DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2);
                    for (int i = 0; i < analyzeTableModel.getRowCount(); i++) {
                        progressBar.setValue((100 * i) / analyzeTableModel.getRowCount());
                        HttpRequestResponse analyzeHrr = (HttpRequestResponse) analyzeTableModel.getValueAt(i, 0);
                        HttpRequestResponse updatedAnalyzeHrr = api.http().sendRequest(analyzeHrr.request());
                        analyzeTableModel.setValueAt(updatedAnalyzeHrr, i, 0);
                        analyzeTableModel.setValueAt(updatedAnalyzeHrr.response().statusCode(), i, 5);
                        analyzeTableModel.setValueAt(updatedAnalyzeHrr.response().body().length(), i, 6);
                    }
                    progressBar.setValue(100);
                    return null;
                }

                @Override
                protected void done() {
                    try {
                        super.get();
                    } catch (Exception ex) {
                        ex.printStackTrace(api.logging().error());
                    }
                }
            };
            worker.execute();
        });

        testButton.addActionListener(e -> {
            SwingWorker<Void, String> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() {
                    createSimplifiedRequest();
                    return null;
                }

                @Override
                protected void done() {
                    try {
                        super.get();
                    } catch (Exception ex) {
                        ex.printStackTrace(api.logging().error());
                    }
                }
            };
            worker.execute();
        });

        copyToPowerShellButton.addActionListener(e -> {
            SwingWorker<Void, String> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() {
                    createSimplifiedRequest();

                    int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                    HttpRequestResponse simplifiedHrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 1);
                    PowerShellBuilder psb = new PowerShellBuilder(api);
                    StringSelection stringSelection = new StringSelection(psb.build(simplifiedHrr.request()).toString());
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, null);
                    return null;
                }

                @Override
                protected void done() {
                    try {
                        super.get();
                    } catch (Exception ex) {
                        ex.printStackTrace(api.logging().error());
                    }
                }
            };
            worker.execute();
        });

        copyToJavaScriptButton.addActionListener(e -> {
            SwingWorker<Void, String> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() {
                    createSimplifiedRequest();

                    int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                    HttpRequestResponse simplifiedHrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 1);
                    JavaScriptRequestBuilder jrb = new JavaScriptRequestBuilder(api);
                    StringSelection stringSelection = new StringSelection(jrb.build(simplifiedHrr.request()).toString());
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, null);
                    return null;
                }

                @Override
                protected void done() {
                    try {
                        super.get();
                    } catch (Exception ex) {
                        ex.printStackTrace(api.logging().error());
                    }
                }
            };
            worker.execute();
        });

        copyToPythonRequestsButton.addActionListener(e -> {
            SwingWorker<Void, String> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() {
                    createSimplifiedRequest();

                    int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                    HttpRequestResponse simplifiedHrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 1);
                    PythonRequestBuilder prb = new PythonRequestBuilder(api);
                    StringSelection stringSelection = new StringSelection(prb.build(simplifiedHrr.request()).toString());
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, null);
                    return null;
                }

                @Override
                protected void done() {
                    try {
                        super.get();
                    } catch (Exception ex) {
                        ex.printStackTrace(api.logging().error());
                    }
                }
            };
            worker.execute();
        });

        // Request Selection Right Click Menu
        JPopupMenu requestSelectionPopupMenu = new JPopupMenu();
        JMenuItem menuRemove = new JMenuItem("Remove");
        menuRemove.addActionListener(e -> {
            try {
                int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2);
                analyzeTableModel.setRowCount(0);
                requestSelectorTableModel.removeRow(modelRow);
                originalRequestEditor.setRequest(originalEditorDefault.request());
                originalResponseEditor.setResponse(originalEditorDefault.response());
                analyzeRequestEditor.setRequest(analyzeEditorDefault.request());
                analyzeResponseEditor.setResponse(analyzeEditorDefault.response());
                simplifiedRequestEditor.setRequest(simplifiedEditorDefault.request());
                simplifiedResponseEditor.setResponse(simplifiedEditorDefault.response());
            } catch (Exception ex) {
                ex.printStackTrace(api.logging().error());
            }
        });
        JMenuItem menuRemoveAll = new JMenuItem("Remove All");
        menuRemoveAll.addActionListener(e -> {
            try {
                for (int i = 0; i < requestSelectorTableModel.getRowCount(); i++) {
                    DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(i, 2);
                    analyzeTableModel.setRowCount(0);
                }
                requestSelectorTableModel.setRowCount(0);
                originalRequestEditor.setRequest(originalEditorDefault.request());
                originalResponseEditor.setResponse(originalEditorDefault.response());
                analyzeRequestEditor.setRequest(analyzeEditorDefault.request());
                analyzeResponseEditor.setResponse(analyzeEditorDefault.response());
                simplifiedRequestEditor.setRequest(simplifiedEditorDefault.request());
                simplifiedResponseEditor.setResponse(simplifiedEditorDefault.response());
            } catch (Exception ex) {
                ex.printStackTrace(api.logging().error());
            }
        });
        requestSelectionPopupMenu.add(menuRemove);
        requestSelectionPopupMenu.add(menuRemoveAll);
        requestSelectorTable.setComponentPopupMenu(requestSelectionPopupMenu);

        // Analyze Table Right Click Menu
        JPopupMenu analyzeSelectionPopupMenu = new JPopupMenu();
        JMenuItem includeAll = new JMenuItem("Include All");
        includeAll.addActionListener(e -> {
            try {
                int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2);

                for (int i = 0; i < analyzeTableModel.getRowCount(); i++) {
                    analyzeTableModel.setValueAt(true, i, 4);
                }
            } catch (Exception ex) {
                ex.printStackTrace(api.logging().error());
            }
        });
        JMenuItem includeNone = new JMenuItem("Include None");
        includeNone.addActionListener(e -> {
            try {
                int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2);

                for (int i = 0; i < analyzeTableModel.getRowCount(); i++) {
                    analyzeTableModel.setValueAt(false, i, 4);
                }
            } catch (Exception ex) {
                ex.printStackTrace(api.logging().error());
            }
        });
        JMenuItem includeStatus = new JMenuItem("Include Based on Response Status Code");
        includeStatus.addActionListener(e -> {
            try {
                int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2);
                HttpRequestResponse originalHrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 0);
                for (int i = 0; i < analyzeTableModel.getRowCount(); i++) {
                    HttpRequestResponse analyzeHrr = (HttpRequestResponse) analyzeTableModel.getValueAt(i, 0);
                    if (analyzeHrr.response() == null) {
                        JOptionPane.showMessageDialog(new JFrame(), "Analysis needs to be done before being able to perform this action.", "Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    if (analyzeHrr.response().statusCode() == originalHrr.response().statusCode()) {
                        analyzeTableModel.setValueAt(false, i, 4);
                    } else {
                        analyzeTableModel.setValueAt(true, i, 4);
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace(api.logging().error());
            }
        });
        JMenuItem includeLength = new JMenuItem("Include Based on Response Body Length");
        includeLength.addActionListener(e -> {
            try {
                int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
                DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2);
                HttpRequestResponse originalHrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 0);
                for (int i = 0; i < analyzeTableModel.getRowCount(); i++) {
                    HttpRequestResponse analyzeHrr = (HttpRequestResponse) analyzeTableModel.getValueAt(i, 0);
                    if (analyzeHrr.response() == null) {
                        JOptionPane.showMessageDialog(new JFrame(), "Analysis needs to be done before being able to perform this action.", "Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    if (analyzeHrr.response().body().length() == originalHrr.response().body().length()) {
                        analyzeTableModel.setValueAt(false, i, 4);
                    } else {
                        analyzeTableModel.setValueAt(true, i, 4);
                    }
                }
                requestSelectorTable.getValueAt(100, 100);
            } catch (Exception ex) {
                ex.printStackTrace(api.logging().error());
            }
        });
        analyzeSelectionPopupMenu.add(includeAll);
        analyzeSelectionPopupMenu.add(includeNone);
        analyzeSelectionPopupMenu.add(includeStatus);
        analyzeSelectionPopupMenu.add(includeLength);

        analyzeTable.setComponentPopupMenu(analyzeSelectionPopupMenu);
    }

    private void createSimplifiedRequest() {
        List<HttpParameter> paramsToRemove = new ArrayList<>();

        int modelRow = requestSelectorTable.convertRowIndexToModel(requestSelectorTable.getSelectedRow());
        HttpRequestResponse hrr = (HttpRequestResponse) requestSelectorTableModel.getValueAt(modelRow, 0);
        DefaultTableModel analyzeTableModel = (DefaultTableModel) requestSelectorTableModel.getValueAt(modelRow, 2);
        HttpRequest simplifiedRequest = hrr.request();

        progressBar.setValue(50);
        for (int i = 0; i < analyzeTableModel.getRowCount(); i++) {
            String type = (String) analyzeTableModel.getValueAt(i, 1);
            String name = (String) analyzeTableModel.getValueAt(i, 2);
            String value = (String) analyzeTableModel.getValueAt(i, 3);
            Boolean include = (Boolean) analyzeTableModel.getValueAt(i, 4);

            if (!include) {
                switch (type) {
                    case "URL":
                        paramsToRemove.add(HttpParameter.urlParameter(name, value));
                        break;
                    case "BODY":
                        paramsToRemove.add(HttpParameter.bodyParameter(name, value));
                        break;
                    case "COOKIE":
                        paramsToRemove.add(HttpParameter.cookieParameter(name, value));
                        break;
                    case "HEADER":
                        simplifiedRequest = simplifiedRequest.withRemovedHeader(HttpHeader.httpHeader(name, value));
                        break;
                }
            }
        }

        simplifiedRequest = simplifiedRequest.withRemovedParameters(paramsToRemove);
        HttpRequestResponse simplifiedHrr = api.http().sendRequest(simplifiedRequest);
        simplifiedRequestEditor.setRequest(simplifiedHrr.request());
        simplifiedResponseEditor.setResponse(simplifiedHrr.response());
        hrrTabPane.setSelectedComponent(simplifiedRequestViewer.getParent());

        requestSelectorTableModel.setValueAt(simplifiedHrr, modelRow, 1);
        progressBar.setValue(100);
    }

    // Returns the main JPanel used for loading into Burp
    public JPanel getMainPanel() {
        return mainPanel;
    }

    // Selects this tab in the parent JTabbedPane
    public void selectParentTab() {
        JTabbedPane parentTabbedPane = (JTabbedPane) mainPanel.getParent();
        parentTabbedPane.setSelectedComponent(mainPanel);
    }

    // Used by "Send to Reproducer" to load the requests to select from
    public void addSelectionRequest(HttpRequestResponse hrr) {
        HttpRequest request = hrr.request();
        HttpResponse response = hrr.response();

        // The response may not exist if it came from a message editor
        if (response == null) {
            hrr = api.http().sendRequest(request);
            response = hrr.response();
        }

        // Create sub-table for analysis data
        DefaultTableModel analyzeTableModel = new DefaultTableModel(null, ANALYZE_HEADERS) {
            // Set the "Include" column to be editable and Boolean to make it a working checkbox
            public boolean isCellEditable(int row, int column) {
                return column == 4;
            }

            public Class getColumnClass(int column) {
                return column == 4 ? Boolean.class : super.getColumnClass(column);
            }
        };

        // Parse headers/cookies/parameters into the sub-table
        List<HttpHeader> headers = hrr.request().headers();
        List<ParsedHttpParameter> parameters = hrr.request().parameters().stream().filter(p -> p.type() == HttpParameterType.COOKIE || p.type() == HttpParameterType.BODY || p.type() == HttpParameterType.URL).collect(Collectors.toList());

        for (ParsedHttpParameter param : parameters) {
            HttpRequest modifiedRequest = request.withRemovedParameters(param);
            HttpRequestResponse modifiedHrr = HttpRequestResponse.httpRequestResponse(modifiedRequest, null);
            analyzeTableModel.addRow(new Object[]{modifiedHrr, param.type().name(), param.name(), param.value(), true, null, null});
        }
        for (HttpHeader header : headers.subList(1, headers.size())) {
            // HTTP 1.1 requires the host header and cookies are handled separately so ignore them
            if (!header.name().equalsIgnoreCase("host") && !header.name().equalsIgnoreCase("cookie")) {
                HttpRequest modifiedRequest = request.withRemovedHeader(header);
                HttpRequestResponse modifiedHrr = HttpRequestResponse.httpRequestResponse(modifiedRequest, null);

                StringJoiner analyzeSupportMessage = new StringJoiner("\n");
                for (String skipHeader : PowerShellBuilder.SKIP_HEADERS) {
                    if (header.name().equalsIgnoreCase(skipHeader)) {
                        analyzeSupportMessage.add(header.name() + " is unsupported in PowerShell");
                    }
                }
                for (String skipHeader : JavaScriptRequestBuilder.SKIP_HEADERS) {
                    if (header.name().equalsIgnoreCase(skipHeader)) {
                        analyzeSupportMessage.add(header.name() + " is unsupported in JavaScript Fetch");
                    }
                }
                for (String skipHeader : JavaScriptRequestBuilder.SKIP_HEADERS_PREFIX) {
                    if (header.name().toLowerCase().startsWith(skipHeader)) {
                        analyzeSupportMessage.add(header.name() + " is unsupported in JavaScript Fetch");
                    }
                }
                for (String skipHeader : PythonRequestBuilder.SKIP_HEADERS) {
                    if (header.name().equalsIgnoreCase(skipHeader)) {
                        analyzeSupportMessage.add(header.name() + " is unsupported in Python Requests");
                    }
                }
                analyzeTableModel.addRow(new Object[]{modifiedHrr, "HEADER", header.name(), header.value(), true, null, null, analyzeSupportMessage.toString()});
            }
        }
        StringJoiner requestSupportMessage = new StringJoiner("\n");
        if (!PowerShellBuilder.SUPPORTED_METHODS.contains(hrr.request().method().toUpperCase())) {
            requestSupportMessage.add(hrr.request().method() + " is unsupported in PowerShell");
        }
        if (!PythonRequestBuilder.SUPPORTED_METHODS.contains(hrr.request().method().toUpperCase())) {
            requestSupportMessage.add(hrr.request().method() + " is unsupported in Python Requests");
        }

        requestSelectorTableModel.addRow(new Object[]{hrr, simplifiedEditorDefault, analyzeTableModel, request.method(), request.url(), response.statusCode(), response.body().length(), requestSupportMessage.toString()});

        // Select the newly added row
        int lastRow = requestSelectorTable.convertRowIndexToView(requestSelectorTableModel.getRowCount() - 1);
        requestSelectorTable.setRowSelectionInterval(lastRow, lastRow);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setOrientation(0);
        mainPanel.add(splitPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        topSplitPane = new JSplitPane();
        splitPane1.setLeftComponent(topSplitPane);
        final JScrollPane scrollPane1 = new JScrollPane();
        topSplitPane.setLeftComponent(scrollPane1);
        scrollPane1.setBorder(BorderFactory.createTitledBorder(null, "Request Selector", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        requestSelectorTable = new JTable();
        requestSelectorTable.setShowVerticalLines(false);
        scrollPane1.setViewportView(requestSelectorTable);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        topSplitPane.setRightComponent(panel1);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel1.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane2.setBorder(BorderFactory.createTitledBorder(null, "Analysis Results", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        analyzeTable = new JTable();
        scrollPane2.setViewportView(analyzeTable);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder(null, "Reproduce in Other Tools", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        copyToJavaScriptButton = new JButton();
        copyToJavaScriptButton.setText("Copy to JavaScript Fetch");
        panel3.add(copyToJavaScriptButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        copyToPowerShellButton = new JButton();
        copyToPowerShellButton.setText("Copy to PowerShell");
        panel3.add(copyToPowerShellButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        copyToPythonRequestsButton = new JButton();
        copyToPythonRequestsButton.setText("Copy to Python Requests");
        panel3.add(copyToPythonRequestsButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder(null, "Status", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        progressBar = new JProgressBar();
        panel4.add(progressBar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        analyzeButton = new JButton();
        analyzeButton.setText("Analyze");
        panel4.add(analyzeButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        testButton = new JButton();
        testButton.setText("Create Simplified Request");
        panel4.add(testButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        hrrTabPane = new JTabbedPane();
        splitPane1.setRightComponent(hrrTabPane);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        hrrTabPane.addTab("Original", panel5);
        originalRequestViewer = new JPanel();
        originalRequestViewer.setLayout(new BorderLayout(0, 0));
        panel5.add(originalRequestViewer, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        originalResponseViewer = new JPanel();
        originalResponseViewer.setLayout(new BorderLayout(0, 0));
        panel5.add(originalResponseViewer, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        hrrTabPane.addTab("Simplified", panel6);
        simplifiedRequestViewer = new JPanel();
        simplifiedRequestViewer.setLayout(new BorderLayout(0, 0));
        panel6.add(simplifiedRequestViewer, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        simplifiedResponseViewer = new JPanel();
        simplifiedResponseViewer.setLayout(new BorderLayout(0, 0));
        panel6.add(simplifiedResponseViewer, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        hrrTabPane.addTab("Analyze", panel7);
        analyzeRequestViewer = new JPanel();
        analyzeRequestViewer.setLayout(new BorderLayout(0, 0));
        panel7.add(analyzeRequestViewer, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        analyzeResponseViewer = new JPanel();
        analyzeResponseViewer.setLayout(new BorderLayout(0, 0));
        panel7.add(analyzeResponseViewer, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
